// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SuperBestFriends.DAL;

#nullable disable

namespace SuperBestFriends.DAL.Migrations
{
    [DbContext(typeof(FriendsDbContext))]
    [Migration("20240731105418_PopulateDate")]
    partial class PopulateDate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SuperBestFriends.DAL.Entities.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Interests")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("UsersSBF");

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            Address = "",
                            BirthDate = new DateTime(1998, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jean.michel@gmail.com",
                            FirstName = "Jean",
                            Interests = "Blah,blah,blah",
                            LastName = "Michel",
                            PhoneNumber = "0638451475"
                        },
                        new
                        {
                            UserId = 2L,
                            Address = "",
                            BirthDate = new DateTime(1985, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "marie.dupont@yahoo.fr",
                            FirstName = "Marie",
                            Interests = "Yoga,Cuisine,Lecture",
                            LastName = "Dupont",
                            PhoneNumber = "0645789632"
                        },
                        new
                        {
                            UserId = 3L,
                            Address = "",
                            BirthDate = new DateTime(1990, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "p.durand@hotmail.com",
                            FirstName = "Pierre",
                            Interests = "Football,Cinéma,Voyages",
                            LastName = "Durand",
                            PhoneNumber = "0712345678"
                        },
                        new
                        {
                            UserId = 4L,
                            Address = "",
                            BirthDate = new DateTime(1992, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sophie.martin@gmail.com",
                            FirstName = "Sophie",
                            Interests = "Photographie,Danse,Jardinage",
                            LastName = "Martin",
                            PhoneNumber = "0698765432"
                        },
                        new
                        {
                            UserId = 5L,
                            Address = "",
                            BirthDate = new DateTime(1988, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "thomas.leroy@outlook.com",
                            FirstName = "Thomas",
                            Interests = "Musique,Technologie,Randonnée",
                            LastName = "Leroy",
                            PhoneNumber = "0623456789"
                        },
                        new
                        {
                            UserId = 6L,
                            Address = "",
                            BirthDate = new DateTime(1995, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "camille.dubois@free.fr",
                            FirstName = "Camille",
                            Interests = "Peinture,Théâtre,Natation",
                            LastName = "Dubois",
                            PhoneNumber = "0787654321"
                        },
                        new
                        {
                            UserId = 7L,
                            Address = "",
                            BirthDate = new DateTime(1987, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "lucas.moreau@orange.fr",
                            FirstName = "Lucas",
                            Interests = "Jeux vidéo,Ski,Cuisine asiatique",
                            LastName = "Moreau",
                            PhoneNumber = "0634567890"
                        },
                        new
                        {
                            UserId = 8L,
                            Address = "",
                            BirthDate = new DateTime(1993, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emma.lefebvre@gmail.com",
                            FirstName = "Emma",
                            Interests = "Mode,Fitness,Voyages",
                            LastName = "Lefebvre",
                            PhoneNumber = "0756789012"
                        },
                        new
                        {
                            UserId = 9L,
                            Address = "",
                            BirthDate = new DateTime(1991, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nicolas.roux@yahoo.com",
                            FirstName = "Nicolas",
                            Interests = "Escalade,Photographie,Histoire",
                            LastName = "Roux",
                            PhoneNumber = "0678901234"
                        },
                        new
                        {
                            UserId = 10L,
                            Address = "",
                            BirthDate = new DateTime(1989, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "chloe.girard@hotmail.fr",
                            FirstName = "Chloé",
                            Interests = "Yoga,Méditation,Cuisine végétarienne",
                            LastName = "Girard",
                            PhoneNumber = "0701234567"
                        },
                        new
                        {
                            UserId = 11L,
                            Address = "",
                            BirthDate = new DateTime(1994, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "antoine.blanc@gmail.com",
                            FirstName = "Antoine",
                            Interests = "Basket,Littérature,Astronomie",
                            LastName = "Blanc",
                            PhoneNumber = "0654321098"
                        });
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.Property<long>("FriendsOfUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("FriendsUserId")
                        .HasColumnType("bigint");

                    b.HasKey("FriendsOfUserId", "FriendsUserId");

                    b.HasIndex("FriendsUserId");

                    b.ToTable("UserUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.HasOne("SuperBestFriends.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("FriendsOfUserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("SuperBestFriends.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("FriendsUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
